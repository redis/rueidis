// Code generated DO NOT EDIT

package cmds

import "testing"

func string0(s Builder) {
	s.Append().Key("1").Value("1").Build()
	s.Decr().Key("1").Build()
	s.Decrby().Key("1").Decrement(1).Build()
	s.Get().Key("1").Build()
	s.Get().Key("1").Cache()
	s.Getdel().Key("1").Build()
	s.Getex().Key("1").ExSeconds(1).Build()
	s.Getex().Key("1").PxMilliseconds(1).Build()
	s.Getex().Key("1").ExatTimestamp(1).Build()
	s.Getex().Key("1").PxatMillisecondsTimestamp(1).Build()
	s.Getex().Key("1").Persist().Build()
	s.Getex().Key("1").Build()
	s.Getrange().Key("1").Start(1).End(1).Build()
	s.Getrange().Key("1").Start(1).End(1).Cache()
	s.Getset().Key("1").Value("1").Build()
	s.Incr().Key("1").Build()
	s.Incrby().Key("1").Increment(1).Build()
	s.Incrbyfloat().Key("1").Increment(1).Build()
	s.Lcs().Key1("1").Key2("1").Len().Idx().Minmatchlen(1).Withmatchlen().Build()
	s.Lcs().Key1("1").Key2("1").Len().Idx().Minmatchlen(1).Build()
	s.Lcs().Key1("1").Key2("1").Len().Idx().Withmatchlen().Build()
	s.Lcs().Key1("1").Key2("1").Len().Idx().Build()
	s.Lcs().Key1("1").Key2("1").Len().Minmatchlen(1).Withmatchlen().Build()
	s.Lcs().Key1("1").Key2("1").Len().Minmatchlen(1).Build()
	s.Lcs().Key1("1").Key2("1").Len().Withmatchlen().Build()
	s.Lcs().Key1("1").Key2("1").Len().Build()
	s.Lcs().Key1("1").Key2("1").Idx().Minmatchlen(1).Withmatchlen().Build()
	s.Lcs().Key1("1").Key2("1").Idx().Minmatchlen(1).Build()
	s.Lcs().Key1("1").Key2("1").Idx().Withmatchlen().Build()
	s.Lcs().Key1("1").Key2("1").Idx().Build()
	s.Lcs().Key1("1").Key2("1").Minmatchlen(1).Withmatchlen().Build()
	s.Lcs().Key1("1").Key2("1").Minmatchlen(1).Build()
	s.Lcs().Key1("1").Key2("1").Withmatchlen().Build()
	s.Lcs().Key1("1").Key2("1").Build()
	s.Mget().Key("1").Key("1").Build()
	s.Mget().Key("1").Key("1").Cache()
	s.Mset().KeyValue().KeyValue("1", "1").KeyValue("1", "1").Build()
	s.Msetnx().KeyValue().KeyValue("1", "1").KeyValue("1", "1").Build()
	s.Psetex().Key("1").Milliseconds(1).Value("1").Build()
	s.Set().Key("1").Value("1").Nx().Get().ExSeconds(1).Build()
	s.Set().Key("1").Value("1").Nx().Get().PxMilliseconds(1).Build()
	s.Set().Key("1").Value("1").Nx().Get().ExatTimestamp(1).Build()
	s.Set().Key("1").Value("1").Nx().Get().PxatMillisecondsTimestamp(1).Build()
	s.Set().Key("1").Value("1").Nx().Get().Keepttl().Build()
	s.Set().Key("1").Value("1").Nx().Get().Build()
	s.Set().Key("1").Value("1").Nx().ExSeconds(1).Build()
	s.Set().Key("1").Value("1").Nx().PxMilliseconds(1).Build()
	s.Set().Key("1").Value("1").Nx().ExatTimestamp(1).Build()
	s.Set().Key("1").Value("1").Nx().PxatMillisecondsTimestamp(1).Build()
	s.Set().Key("1").Value("1").Nx().Keepttl().Build()
	s.Set().Key("1").Value("1").Nx().Build()
	s.Set().Key("1").Value("1").Xx().Get().ExSeconds(1).Build()
	s.Set().Key("1").Value("1").Xx().Get().PxMilliseconds(1).Build()
	s.Set().Key("1").Value("1").Xx().Get().ExatTimestamp(1).Build()
	s.Set().Key("1").Value("1").Xx().Get().PxatMillisecondsTimestamp(1).Build()
	s.Set().Key("1").Value("1").Xx().Get().Keepttl().Build()
	s.Set().Key("1").Value("1").Xx().Get().Build()
	s.Set().Key("1").Value("1").Xx().ExSeconds(1).Build()
	s.Set().Key("1").Value("1").Xx().PxMilliseconds(1).Build()
	s.Set().Key("1").Value("1").Xx().ExatTimestamp(1).Build()
	s.Set().Key("1").Value("1").Xx().PxatMillisecondsTimestamp(1).Build()
	s.Set().Key("1").Value("1").Xx().Keepttl().Build()
	s.Set().Key("1").Value("1").Xx().Build()
	s.Set().Key("1").Value("1").Get().ExSeconds(1).Build()
	s.Set().Key("1").Value("1").Get().PxMilliseconds(1).Build()
	s.Set().Key("1").Value("1").Get().ExatTimestamp(1).Build()
	s.Set().Key("1").Value("1").Get().PxatMillisecondsTimestamp(1).Build()
	s.Set().Key("1").Value("1").Get().Keepttl().Build()
	s.Set().Key("1").Value("1").Get().Build()
	s.Set().Key("1").Value("1").ExSeconds(1).Build()
	s.Set().Key("1").Value("1").PxMilliseconds(1).Build()
	s.Set().Key("1").Value("1").ExatTimestamp(1).Build()
	s.Set().Key("1").Value("1").PxatMillisecondsTimestamp(1).Build()
	s.Set().Key("1").Value("1").Keepttl().Build()
	s.Set().Key("1").Value("1").Build()
	s.Setex().Key("1").Seconds(1).Value("1").Build()
	s.Setnx().Key("1").Value("1").Build()
	s.Setrange().Key("1").Offset(1).Value("1").Build()
	s.Strlen().Key("1").Build()
	s.Strlen().Key("1").Cache()
}

func TestCommand_InitSlot_string(t *testing.T) {
	var s = NewBuilder(InitSlot)
	string0(s)
}

func TestCommand_NoSlot_string(t *testing.T) {
	var s = NewBuilder(NoSlot)
	string0(s)
}
